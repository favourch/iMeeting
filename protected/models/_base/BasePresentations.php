<?php

/**
 * This is the model base class for the table "tbl_presentations".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Presentations".
 *
 * Columns in table "tbl_presentations" available as properties of the model,
 * followed by relations of table "tbl_presentations" available as properties of the model.
 *
 * @property string $id
 * @property string $room_sha1
 * @property string $path
 * @property string $name
 * @property string $filename
 * @property integer $meeting_time
 *
 * @property Rooms $room
 */
abstract class BasePresentations extends GxActiveRecord {
	public $from_date;
	public $to_date;
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_presentations';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Presentations|Presentations', $n);
	}

	public static function representingColumn() {
		return 'room_sha1';
	}

	public function rules() {
		return array(
			array('room_sha1, path, filename, meeting_time', 'required'),
			array('meeting_time', 'numerical', 'integerOnly'=>true),
			array('room_sha1', 'length', 'max'=>40),
			array('path, filename, name', 'length', 'max'=>255),
			array('id, room_sha1, name, path, filename, meeting_time, from_date, to_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			//'room_dir' => array(self::BELONGS_TO, 'RoomDirectory', 'id'),
			//'room'=>array(self::HAS_ONE, 'Rooms', array('room_id'=>'id'), 'through'=>'room_dir'),
			//'company' => array(self::BELONG_TO,'Company','company_id'=>'id','through'=>'room')
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'room_sha1' => 'Room hash',
			'name'=> Yii::t('app', 'File name'),
			'path' => Yii::t('app', 'Path'),
			'filename' => Yii::t('app', 'Filename'),
			'meeting_time' => Yii::t('app', 'Meeting Time'),
			'room' => null,
		);
	}

	public function search() {
		
		
		$user=User::model()->findByPk(Yii::app()->user->id);			
		
		
		$roomDir = Yii::app()->db->createCommand()
    	->select('r.directory')
	    ->from('tbl_room_directory r, tbl_company c')
	    //->join('tbl_room_directory r, tbl_rooms room', 'r.id=p.room_sha1')
	    ->where('r.company_id = c.id AND c.id = :company_id ', 
	    		array(':company_id'=>$user->company_id))
	    ->queryAll();
    
		//print_r($roomDir);
		$roomArr[] = null;
		foreach ($roomDir as $key => $value) {
			$roomArr[]= $value['directory'];
			
		}
		//print_r($roomArr);
		//exit();
		$criteria = new CDbCriteria;
		
        
		
		$criteria->select = array('t.id, t.name, t.filename, t.meeting_time, t.room_sha1, t1.room_id');
		$criteria->join="RIGHT JOIN tbl_room_directory t1 ON t.room_sha1 = t1.directory
		
		 ";
		//$criteria->join=" ";
		
		//$criteria->compare('id', $this->id, true);
		
		/* search from date -> to date */
		if(!empty($this->from_date) && empty($this->to_date))
        {
            $criteria->condition = "meeting_time >= '$this->from_date'";  // date is database date column field
        }elseif(!empty($this->to_date) && empty($this->from_date))
        {
        	$this->to_date += 24*3600;
            $criteria->condition = "meeting_time<= '$this->to_date'";
        }elseif(!empty($this->to_date) && !empty($this->from_date))
        {
        	$this->to_date += 24*3600;
            $criteria->condition = "meeting_time >= '$this->from_date' and meeting_time <= '$this->to_date'";
        }
		
		
		$criteria->compare('room_sha1', $roomArr);
		
		//$criteria->compare('path', $this->path, true);
		//$criteria->compare('filename', $this->filename, true);
		//$criteria->compare('meeting_time', $this->meeting_time);
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
		
	}
}